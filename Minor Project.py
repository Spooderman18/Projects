import tkinter as tk
from tkinter import filedialog
import hashlib
import requests
import json
import csv
import logging

# Declare api_key as a global variable
api_key = ""

# Configure logging
logging.basicConfig(filename='user_activity.log', level=logging.INFO, format='%(asctime)s - %(levelname)s: %(message)s')

def hash_file(file_path):
    try:
        with open(file_path, 'rb') as file:
            hasher = hashlib.sha256()
            while chunk := file.read(65536):
                hasher.update(chunk)
        return hasher.hexdigest()
    except FileNotFoundError:
        return None

def verify_file(api_key, file_hash):
    url = 'https://www.virustotal.com/vtapi/v2/file/report'
    params = {'apikey': api_key, 'resource': file_hash}
    response = requests.get(url, params=params)

    try:
        response.raise_for_status()  # Check for HTTP errors

        # Check for 403 Forbidden explicitly
        if response.status_code == 403:
            return {"error": "HTTP error: Forbidden (403)"}

        data = response.json()
    except requests.exceptions.HTTPError as http_error:
        return {"error": f"HTTP error: {http_error}"}
    except json.JSONDecodeError as json_error:
        return {"error": f"JSON decoding error: {json_error}"}

    if "response_code" in data:
        return data
    else:
        return {"error": "Invalid response from VirusTotal"}


def append_to_csv(file_path, csv_data):
    try:
        # Create or open the CSV file in append mode
        with open(file_path, mode='a', newline='') as csv_file:
            fieldnames = ['File Path', 'Local Hash', 'VirusTotal Hash', 'Positives', 'Scan Date']
            writer = csv.DictWriter(csv_file, fieldnames=fieldnames)

            # Write header only if the file is new
            if csv_file.tell() == 0:
                writer.writeheader()

            # Write scan report
            writer.writerow(csv_data)
    except PermissionError:
        logging.error(f"PermissionError: Could not write to {file_path}")

def log_user_activity(activity):
    logging.info(activity)

def select_file():
    file_path = filedialog.askopenfilename()
    if file_path:
        # Display file information
        file_info_label.config(text=f"Selected File: {file_path}")

        # Generate hash value when file is selected
        hash_value = hash_file(file_path)
        hash_value_label.config(text=f"File Hash: {hash_value}")

        # Log user activity
        log_user_activity(f"File selected: {file_path}")

def display_scan_report(result, file_path, local_hash):
    if "error" in result:
        verification_status_label.config(text=result["error"], fg="red")
    else:
        virus_total_hash = result.get("sha256", "")
        positives = result.get("positives", 0)

        if positives > 0:
            verification_status_label.config(text=f"Threats Found! Positives: {positives}", fg="red")
        else:
            verification_status_label.config(text="Clean", fg="green")

            # Create or open the CSV file in append mode
            csv_filename = 'scan_report.csv'
            csv_data = {
                'File Path': file_path,
                'Local Hash': local_hash,
                'VirusTotal Hash': virus_total_hash,
                'Positives': positives,
                'Scan Date': result.get("scan_date", "N/A")
            }
            append_to_csv(csv_filename, csv_data)

            # Log user activity
            log_user_activity(f"File verified: {file_path}, Status: {'Clean' if positives == 0 else 'Threats Found'}")

            # Provide feedback to the user
            status_label.config(text=f"Local Hash: {local_hash}\nVirusTotal Hash: {virus_total_hash}\n"
                                     f"Scan report appended to {csv_filename}")

            # Display detailed scan report
            detailed_report = f"Scan Date: {result.get('scan_date', 'N/A')}\n" \
                               f"Permalink: {result.get('permalink', 'N/A')}\n" \
                               f"Scan Engine: {result.get('scan_engine', 'N/A')}\n" \
                               f"Verbose Message: {result.get('verbose_msg', 'N/A')}\n"
            detailed_report_label.config(text=detailed_report, fg="blue")

def verify():
    selected_file = file_info_label.cget("text")
    if selected_file.startswith("Selected File: "):
        file_path = selected_file[len("Selected File: "):]

        # Get hash value generated by the code
        local_hash = hash_file(file_path)

        # Get hash value from VirusTotal
        result = verify_file(api_key, local_hash)

        # Display detailed VirusTotal scan report
        display_scan_report(result, file_path, local_hash)  # Pass local_hash to display_scan_report


def set_api_key():
    global api_key  # Declare api_key as global
    api_key = api_key_entry.get()
    if api_key:
        # Save the API key to a configuration file or secure storage for future use
        with open('api_key.txt', 'w') as api_key_file:
            api_key_file.write(api_key)
        api_key_entry.config(state='disabled')  # Disable the entry after setting the key
        set_api_key_button.config(state='disabled')  # Disable the button after setting the key
        status_label.config(text="API Key set successfully!", fg="green")
        log_user_activity("VirusTotal API key set")

# Create the GUI
root = tk.Tk()
root.title("Program Verification")

# Common system fonts (you can customize these)
select_button = tk.Button(root, text="Select File", command=select_file, font=("Pacifico", 16, "italic"))
select_button.pack()

file_info_label = tk.Label(root, text="Selected File: ")
file_info_label.pack()

hash_value_label = tk.Label(root, text="File Hash: ")
hash_value_label.pack()

# Common system fonts (you can customize these)
verify_button = tk.Button(root, text="Verify", command=verify, font=("Pacifico", 16, "italic"))
verify_button.pack()

# Define verification_status_label as a global variable
verification_status_label = tk.Label(root, text="")
verification_status_label.pack()

status_label = tk.Label(root, text="")
status_label.pack()

# Add an Entry widget for users to input their VirusTotal API key
api_key_label = tk.Label(root, text="Enter Your VirusTotal API Key:")
api_key_label.pack()

api_key_entry = tk.Entry(root, show="*")  # Hide the API key for security
api_key_entry.pack()

set_api_key_button = tk.Button(root, text="Set API Key", command=set_api_key, font=("Pacifico", 16, "italic"))
set_api_key_button.pack()

# Add a Label to display detailed VirusTotal scan report
detailed_report_label = tk.Label(root, text="", wraplength=500)
detailed_report_label.pack()

# Extended GUI size
root.geometry("800x600")

root.mainloop()

